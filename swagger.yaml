openapi: 3.0.4
info:
  title: "E-commerce REST API"
  description: "A REST API for an e-commerce application. The API is part of a practice project by Codecademy."
  version: "1.0.0"

servers:
  - url: https://localhost:3000/

tags:
  - name: authentication
    description: Operations related to user registration and login
  - name: cart
    description: Operations related to user carts
  - name: orders
    description: Operations related to user orders
  - name: products
    description: Operations related to store products
  - name: users
    description: Operations related to user management

paths:
  /auth/register:
    post:
      tags:
        - authentication
      summary: User registration.
      description: Register a user with a chosen email and password.
      operationId: registerUser
      requestBody:
        description: Register a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Errors in the provided data. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: A user with that email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      tags:
        - authentication
      summary: User login
      description: Users can log in with their email address and account password.
      operationId: loginUser
      requestBody:
        description: Log in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSecure'
        '400':
          description: Data validation error. Please check the returned message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /auth/logout:
    post:
      tags:
        - authentication
      summary: User logout
      description: Logs out the current user.
      operationId: logoutUser
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                type: string
                example: "Logout successful."
        default:
          description: Unexpected error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cart:
    post:
      tags:
        - cart
      summary: Create a new cart.
      description: Creates a new cart for the current user.
      operationId: createCart
      requestBody:
        required: true
        description: Create a cart with an added product.
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
              
      responses:
        '200':
          description: Cart created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartProducts"
        '403':
          description: The user is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: Data validation error or a cart for this user already exists. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              
  /cart/{cartId}:
    get:
      tags:
        - cart
      summary: Retrieve cart details.
      description: Retrieves the cart details for the current user.
      operationId: getCart
      parameters:
        - name: cartId
          in: path
          description: Numeric ID of a cart in the system.
          required: true
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Cart found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartProducts"
        '400':
          description: Invalid cart ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: The user is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: A cart with the provided ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - cart
      summary: Update an existing cart.
      description: Updates the cart items and/or quantities for the existing user.
      operationId: updateCart
      parameters:
        - name: cartId
          in: path
          description: Numeric ID of a cart in the system.
          required: true
          schema:
            type: integer
            example: 15
      requestBody:
        required: true
        description: Update the cart by adding a new product or changing the quantity of one that already exists in the cart.
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        '200':
          description: Cart updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartProducts"
        '400':
          description: Data validation error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: The user is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: A cart with the provided ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /cart/{cartId}/checkout:
    post:
      tags:
        - cart
      summary: Checkout the cart.
      description: Checks out the cart for the current user.
      operationId: checkoutCart
      parameters:
        - name: cartId
          in: path
          description: Numeric ID of a cart in the system.
          required: true
          schema:
            type: integer
            example: 15
      requestBody:
        required: true
        description: Checkout the cart.
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Payment"
      responses:
        '200':
          description: Checkout successful. A new order was created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartProducts"
        '400':
          description: Data validation error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: The user is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: A cart with the provided ID was not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /cart/{cartId}/{productId}:
    post:
      tags:
        - cart
      summary: Remove a product.
      description: Removes a product from the cart.
      operationId: removeCartProduct
      parameters:
        - name: cartId
          in: path
          description: Numeric ID of a cart in the system.
          required: true
          schema:
            type: integer
            example: 15
        - name: productId
          in: path
          description: Numeric ID of a product.
          required: true
          schema:
            type: integer
            example: 11
      responses:
        '200':
          description: Product removed succcessfully. The cart still exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartProducts"
        '204':
          description: Product removed successfully. The cart was left empty and was deleted.
        '400':
          description: Data validation error. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '403':
          description: The user is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: A cart or a product with the provided IDs could not be found. Check the returned message for details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
components:
  schemas:
    User:
      required:
        - email
        - password
        - firstName
        - lastName
      type: object
      properties:
        email:
          type: string
          pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
          example: email@example.com
          description: Email must follow a pattern of xxxxx@xxx.xxx
        password:
          type: string
          example: password123
          pattern: /\s/
          description: Password must not contain spaces.
        firstName:
          type: string
          example: John B.
          description: First name must not contain any special characters. Dots and spaces are allowed.
        lastName:
          type: string
          example: Doe
          description: Last name must not contain any special characters. Dots and spaces are allowed.
          
    UserSecure:
      type: object
      properties:
        id:
          type: integer
          example: 13
          description: The user's ID in the system
        email:
          type: string
          example: email@example.com
          description: The user's registered email address.
        firstName:
          type: string
          example: John
          description: The user's first name in the system.
        lastName:
          type: string
          example: Doe
          description: The user's last name in the system.
          
    UserLogin:
      required:
       - email
       - password
      type: object
      properties:
        email:
          type: string
          example: email@example.com
          description: The user's registered email address.
        password:
          type: string
          example: password123!
          description: The user's password in the system.
          
    CartProducts:
      type: object
      properties:
        cart:
          type: object
          properties:
            id:
              type: integer
              example: 15
            user_id:
              type: integer
              example: 13
            total_price:
              type: number
              format: float
              multipleOf: 0.01
              example: 9.99
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 10
              name:
                type: string
                example: Apple
              quantity:
                type: integer
                example: 5
    Product:
      type: object
      required:
        - itemId
        - quantity
      properties:
        itemId:
          type: string
          example: 11
        quantity:
          type: integer
          example: 5
          
    Payment:
      type: object
      required:
        - firstName
        - lastName
        - cardNumber
        - expiryDate
        - cvv
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        cardNumber:
          type: string
          example: "123213 12123 123231"
        expiryDate:
          type: string
          example: "01-01-2028"
        cvv:
          type: integer
          example: 890
          
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
